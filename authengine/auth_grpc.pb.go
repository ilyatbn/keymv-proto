// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthEngineClient is the client API for AuthEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthEngineClient interface {
	Auth(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*ResponseToken, error)
	Validate(ctx context.Context, in *ValidationDataReq, opts ...grpc.CallOption) (*ValidationDataRes, error)
}

type authEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthEngineClient(cc grpc.ClientConnInterface) AuthEngineClient {
	return &authEngineClient{cc}
}

func (c *authEngineClient) Auth(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*ResponseToken, error) {
	out := new(ResponseToken)
	err := c.cc.Invoke(ctx, "/auth.AuthEngine/auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authEngineClient) Validate(ctx context.Context, in *ValidationDataReq, opts ...grpc.CallOption) (*ValidationDataRes, error) {
	out := new(ValidationDataRes)
	err := c.cc.Invoke(ctx, "/auth.AuthEngine/validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthEngineServer is the server API for AuthEngine service.
// All implementations must embed UnimplementedAuthEngineServer
// for forward compatibility
type AuthEngineServer interface {
	Auth(context.Context, *Credentials) (*ResponseToken, error)
	Validate(context.Context, *ValidationDataReq) (*ValidationDataRes, error)
	mustEmbedUnimplementedAuthEngineServer()
}

// UnimplementedAuthEngineServer must be embedded to have forward compatible implementations.
type UnimplementedAuthEngineServer struct {
}

func (UnimplementedAuthEngineServer) Auth(context.Context, *Credentials) (*ResponseToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthEngineServer) Validate(context.Context, *ValidationDataReq) (*ValidationDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedAuthEngineServer) mustEmbedUnimplementedAuthEngineServer() {}

// UnsafeAuthEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthEngineServer will
// result in compilation errors.
type UnsafeAuthEngineServer interface {
	mustEmbedUnimplementedAuthEngineServer()
}

func RegisterAuthEngineServer(s grpc.ServiceRegistrar, srv AuthEngineServer) {
	s.RegisterService(&AuthEngine_ServiceDesc, srv)
}

func _AuthEngine_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthEngineServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthEngine/auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthEngineServer).Auth(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthEngine_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthEngineServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthEngine/validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthEngineServer).Validate(ctx, req.(*ValidationDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthEngine_ServiceDesc is the grpc.ServiceDesc for AuthEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthEngine",
	HandlerType: (*AuthEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "auth",
			Handler:    _AuthEngine_Auth_Handler,
		},
		{
			MethodName: "validate",
			Handler:    _AuthEngine_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
